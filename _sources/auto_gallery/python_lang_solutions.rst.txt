
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_gallery/python_lang_solutions.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_gallery_python_lang_solutions.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_gallery_python_lang_solutions.py:


Created on Sat Jan 16 10:03:29 2016

@author: edouard.duchesnay@gmail.com

.. GENERATED FROM PYTHON SOURCE LINES 9-18

Exercise 1: functions
~~~~~~~~~~~~~~~~~~~~~

Create a function that acts as a simple calulator If the operation is
not specified, default to addition If the operation is misspecified,
return an prompt message Ex: ``calc(4,5,"multiply")`` returns 20 Ex:
``calc(3,5)`` returns 8 Ex: ``calc(1, 2, "something")`` returns error
message


.. GENERATED FROM PYTHON SOURCE LINES 18-46

.. code-block:: Python


    def calc(a, b, op='add'):
        if op == 'add':
            return a + b
        elif op == 'sub':
            return a - b
        else:
            print('valid operations are add and sub')


    # call the function
    calc(10, 4, op='add')   # returns 14
    calc(10, 4, 'add')      # also returns 14: unnamed arguments are inferred by position
    calc(10, 4)             # also returns 14: default for 'op' is 'add'
    calc(10, 4, 'sub')      # returns 6
    calc(10, 4, 'div')      # prints 'valid operations are add and sub'

    a, b, op = 2, 3, "+"


    def calc2(a, b, op='+'):
        st = "%.f %s %.f" % (a, op, b)
        return eval(st)


    calc2(3, 3, "+")






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    valid operations are add and sub

    6



.. GENERATED FROM PYTHON SOURCE LINES 47-58

Exercise 2: functions + list + loop
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Given a list of numbers, return a list where all adjacent duplicate
elements have been reduced to a single element. Ex: ``[1, 2, 2, 3, 2]``
returns ``[1, 2, 3, 2]``. You may create a new list or modify the passed
in list.

Remove all duplicate values (adjacent or not) Ex: ``[1, 2, 2, 3, 2]``
returns ``[1, 2, 3]``


.. GENERATED FROM PYTHON SOURCE LINES 58-87

.. code-block:: Python



    def remove_adjacent_duplicates(original_list):
        new_list = []
        new_list.append(original_list[0])
        for num in original_list[1:]:
            if num != new_list[-1]:
                new_list.append(num)
        return new_list

    remove_adjacent_duplicates([1, 2, 2, 3, 2])

    def remove_duplicates(original_list):
        new_list = []
        for num in original_list:
            if num not in new_list:
                new_list.append(num)
        return new_list

    remove_duplicates([3, 2, 2, 1, 2])

    # or this solution mights modify the order

    def remove_duplicates(original_list):
        return(list(set(original_list)))

    remove_duplicates([3, 2, 2, 1, 2])






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    [1, 2, 3]



.. GENERATED FROM PYTHON SOURCE LINES 88-103

Exercise 3: File I/O
~~~~~~~~~~~~~~~~~~~~

1. Copy/paste the BSD 4 clause license (https://en.wikipedia.org/wiki/BSD_licenses)
into a text file. Read, the file and count the occurrences of each
word within the file. Store the words' occurrence number in a dictionary.

2. Write an executable python command ``count_words.py`` that parse
a list of input files provided after ``--input`` parameter.
The dictionary of occurrence is save in a csv file provides by ``--output``.
with default value word_count.csv.
Use:
- open
- regular expression
- argparse (https://docs.python.org/3/howto/argparse.html)

.. GENERATED FROM PYTHON SOURCE LINES 103-179

.. code-block:: Python



    bsd_4clause = """
    Copyright (c) <year>, <copyright holder>
    All rights reserved.

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions are met:
    1. Redistributions of source code must retain the above copyright
       notice, this list of conditions and the following disclaimer.
    2. Redistributions in binary form must reproduce the above copyright
       notice, this list of conditions and the following disclaimer in the
       documentation and/or other materials provided with the distribution.
    3. All advertising materials mentioning features or use of this software
       must display the following acknowledgement:
       This product includes software developed by the <organization>.
    4. Neither the name of the <organization> nor the
       names of its contributors may be used to endorse or promote products
       derived from this software without specific prior written permission.

    THIS SOFTWARE IS PROVIDED BY <COPYRIGHT HOLDER> ''AS IS'' AND ANY
    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
    WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
    DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
    DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
    (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
    LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
    ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
    (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
    SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    """

    import os
    import tempfile

    tmpfilename = os.path.join(tempfile.gettempdir(),
                           "bsd.txt")

    fd = open(tmpfilename, "w")
    fd.write(bsd_4clause)
    fd.close()


    fd = open(tmpfilename, "r")

    count = dict()
    count = {}

    for line in fd:    
        line = line.lower()
        for word in line.split():
            if not word in count:
                count[word] = 1
            else:
                count[word] += 1

    fd.close()

    print(count)

    """
    Comment to deal with missing import of urllib2

    import urllib2
    url = "https://www.gnu.org/licenses/gpl-3.0.txt"
    f = urllib2.urlopen(url)
    content = f.read()
    f.close()
    content = content.replace("\n", " ")
    content = content.lower()
    c = content.split(' ')
    print(len(c))
    from collections import Counter
    print(Counter(c))
    """





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    {'copyright': 3, '(c)': 1, '<year>,': 1, '<copyright': 3, 'holder>': 3, 'all': 2, 'rights': 1, 'reserved.': 1, 'redistribution': 1, 'and': 7, 'use': 3, 'in': 6, 'source': 2, 'binary': 2, 'forms,': 1, 'with': 2, 'or': 10, 'without': 2, 'modification,': 1, 'are': 3, 'permitted': 1, 'provided': 3, 'that': 1, 'the': 15, 'following': 4, 'conditions': 3, 'met:': 1, '1.': 1, 'redistributions': 2, 'of': 14, 'code': 1, 'must': 3, 'retain': 1, 'above': 2, 'notice,': 2, 'this': 7, 'list': 2, 'disclaimer.': 1, '2.': 1, 'form': 1, 'reproduce': 1, 'disclaimer': 1, 'documentation': 1, 'and/or': 1, 'other': 1, 'materials': 2, 'distribution.': 1, '3.': 1, 'advertising': 1, 'mentioning': 1, 'features': 1, 'software': 4, 'display': 1, 'acknowledgement:': 1, 'product': 1, 'includes': 1, 'developed': 1, 'by': 2, '<organization>.': 1, '4.': 1, 'neither': 1, 'name': 1, '<organization>': 1, 'nor': 1, 'names': 1, 'its': 1, 'contributors': 1, 'may': 1, 'be': 2, 'used': 1, 'to': 1, 'endorse': 1, 'promote': 1, 'products': 1, 'derived': 1, 'from': 1, 'specific': 1, 'prior': 1, 'written': 1, 'permission.': 1, 'is': 1, "''as": 1, "is''": 1, 'any': 4, 'express': 1, 'implied': 2, 'warranties,': 1, 'including,': 1, 'but': 2, 'not': 2, 'limited': 2, 'to,': 2, 'warranties': 1, 'merchantability': 1, 'fitness': 1, 'for': 2, 'a': 1, 'particular': 1, 'purpose': 1, 'disclaimed.': 1, 'no': 1, 'event': 1, 'shall': 1, 'liable': 1, 'direct,': 1, 'indirect,': 1, 'incidental,': 1, 'special,': 1, 'exemplary,': 1, 'consequential': 1, 'damages': 1, '(including,': 1, 'procurement': 1, 'substitute': 1, 'goods': 1, 'services;': 1, 'loss': 1, 'use,': 1, 'data,': 1, 'profits;': 1, 'business': 1, 'interruption)': 1, 'however': 1, 'caused': 1, 'on': 1, 'theory': 1, 'liability,': 2, 'whether': 1, 'contract,': 1, 'strict': 1, 'tort': 1, '(including': 1, 'negligence': 1, 'otherwise)': 1, 'arising': 1, 'way': 1, 'out': 1, 'software,': 1, 'even': 1, 'if': 1, 'advised': 1, 'possibility': 1, 'such': 1, 'damage.': 1}

    '\nComment to deal with missing import of urllib2\n\nimport urllib2\nurl = "https://www.gnu.org/licenses/gpl-3.0.txt"\nf = urllib2.urlopen(url)\ncontent = f.read()\nf.close()\ncontent = content.replace("\n", " ")\ncontent = content.lower()\nc = content.split(\' \')\nprint(len(c))\nfrom collections import Counter\nprint(Counter(c))\n'



.. GENERATED FROM PYTHON SOURCE LINES 180-199

Exercise 4: OOP
~~~~~~~~~~~~~~~

1. Create a class ``Employee`` with 2 attributes provided in the
   constructor: ``name``, ``years_of_service``. With one method
   ``salary`` with is obtained by ``1500 + 100 * years_of_service``.

2. Create a subclass ``Manager`` which redefine ``salary`` method
   ``2500 + 120 * years_of_service``.

3. Create a small dictionary database where the key is the
   employee's name. Populate the database with: samples =
   Employee('lucy', 3), Employee('john', 1), Manager('julie', 10),
   Manager('paul', 3)

4. Return a table of made name, salary rows, i.e. a list of list [[name,
   salary]]

5. Compute the average salary

.. GENERATED FROM PYTHON SOURCE LINES 199-233

.. code-block:: Python


    import pandas as pd


    class Employee:
        def __init__(self, name, years_of_service):
            self.name = name
            self.years_of_service = years_of_service

        def salary(self):
            return 1500 + 100 * self.years_of_service


    class Manager(Employee):
        def salary(self):
            return 2500 + 120 * self.years_of_service


    samples = [Employee("lucy", 3),
               Employee("john", 1),
               Manager('julie', 3),
               Manager('paul', 1)]

    employees = {e.name: e for e in samples}

    employees.keys()

    df = pd.DataFrame([[name, obj.salary()] for name, obj in employees.items()],
                 columns=['name', 'salary'])

    [[name, employees[name].salary()] for name
          in employees]

    sum([e.salary() for e in employees.values()]) / len(employees)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    2220.0




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.182 seconds)


.. _sphx_glr_download_auto_gallery_python_lang_solutions.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: python_lang_solutions.ipynb <python_lang_solutions.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: python_lang_solutions.py <python_lang_solutions.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: python_lang_solutions.zip <python_lang_solutions.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
