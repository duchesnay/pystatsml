MDS
---

.. code:: ipython3

    import numpy as np
    import matplotlib.pyplot as plt
    from sklearn.decomposition import PCA
    from sklearn.manifold import MDS
    %matplotlib inline
    
    # https://tgmstat.wordpress.com/2013/11/28/computing-and-visualizing-pca-in-r/
    
    import pandas as pd
    
    try:
        salary = pd.read_csv('datasets/iris.csv')
    except:
        url = 'https://github.com/duchesnay/pystatsml/raw/master/datasets/iris.csv'
        df = pd.read_csv(url)
    
    X = np.asarray(df.iloc[:, :4])
    X -= np.mean(X, axis=0)
    X /= np.std(X, axis=0, ddof=1)
    
    from sklearn import metrics
    D = metrics.pairwise.pairwise_distances(X, metric='euclidean')
    
    
    stress = [MDS(dissimilarity='precomputed', n_components=k,
               random_state=42, max_iter=300, eps=1e-9).fit(D).stress_ for k in range(1, X.shape[1]+1)]
    
    print("Stress", stress)
    plt.plot(range(1, 5), stress)
    
    K = 2
    mds = MDS(dissimilarity='precomputed', n_components=K,
               random_state=42, max_iter=300, eps=1e-9)
    Xmds = mds.fit_transform(D)
    
    pca = PCA(n_components=K)
    pca.fit(X)
    PC = pca.transform(X)
    
    print("Correlation between PCA and MDS")
    cor = [np.corrcoef(Xmds[:, j], PC[:, j])[0, 1] for j in range(min(Xmds.shape[1], PC.shape[1]))]
    print(cor)


.. parsed-literal::

    Stress [np.float64(14143.59228157748), np.float64(233.38619784318047), np.float64(5.225418848725238), np.float64(0.7960019462447914)]
    Correlation between PCA and MDS
    [np.float64(0.998494407056071), np.float64(-0.9861918737545218)]



.. image:: manifold_learning_solutions_files/manifold_learning_solutions_1_1.png


