
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_gallery/stat_multiv_solutions.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_gallery_stat_multiv_solutions.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_gallery_stat_multiv_solutions.py:


Munivariate statistics exercises
================================

.. GENERATED FROM PYTHON SOURCE LINES 5-76




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [0.86458057 0.89208458]
    [[1.01130155 0.88527673]
     [0.88527673 1.10878452]]
       Mahalanobis  Euclidean
    0     0.614862   0.385172
    1     1.480859   1.358349
    2     1.865192   2.067514
    3     0.652545   0.559931
    4     4.137264   1.780835
    5     1.280921   0.768898
    6     1.071550   1.140733
    7     0.847506   0.675616
    8     0.943862   1.215400
    9     0.590307   0.823426






|

.. code-block:: Python

    import pandas as pd
    import numpy as np
    import matplotlib.pyplot as plt
    #%matplotlib inline
    np.random.seed(seed=42)  # make the example reproducible

    '''
    ### Dot product and Euclidean norm
    '''

    a = np.array([2,1])
    b = np.array([1,1])

    def euclidian(x):
        return np.sqrt(np.dot(x, x))

    euclidian(a)

    euclidian(a - b)

    np.dot(b, a / euclidian(a))

    X = np.random.randn(100, 2)
    np.dot(X, a / euclidian(a))

    '''
    ### Covariance matrix and Mahalanobis norm
    '''

    N = 100
    mu = np.array([1, 1])
    Cov = np.array([[1, .8],
                    [.8, 1]])

    X = np.random.multivariate_normal(mu, Cov, N)

    xbar = np.mean(X, axis=0)
    print(xbar)

    Xc = (X - xbar)

    np.mean(Xc, axis=0)

    S = 1 / (N - 1) * np.dot(Xc.T, Xc)
    print(S)

    #import scipy

    Sinv = np.linalg.inv(S)


    def mahalanobis(x, xbar, Sinv):
        xc = x - xbar
        return np.sqrt(np.dot(np.dot(xc, Sinv), xc))

    dists = pd.DataFrame(
    [[mahalanobis(X[i, :], xbar, Sinv),
      euclidian(X[i, :] - xbar)] for i in range(X.shape[0])],
                columns = ['Mahalanobis', 'Euclidean'])

    print(dists[:10])

    x = X[0, :]

    import scipy.spatial
    assert(mahalanobis(X[0, :], xbar, Sinv) == scipy.spatial.distance.mahalanobis(xbar, X[0, :], Sinv))
    assert(mahalanobis(X[1, :], xbar, Sinv) == scipy.spatial.distance.mahalanobis(xbar, X[1, :], Sinv))






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.005 seconds)


.. _sphx_glr_download_auto_gallery_stat_multiv_solutions.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: stat_multiv_solutions.ipynb <stat_multiv_solutions.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: stat_multiv_solutions.py <stat_multiv_solutions.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: stat_multiv_solutions.zip <stat_multiv_solutions.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
